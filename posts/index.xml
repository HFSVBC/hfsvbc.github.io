<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blog on Hugo Curado</title>
        <link>https://www.hugocurado.info/posts/</link>
        <description>Recent content in Blog on Hugo Curado</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 12 May 2019 12:14:34 +0600</lastBuildDate>
        <atom:link href="https://www.hugocurado.info/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Docker as a Development Environment</title>
            <link>https://www.hugocurado.info/posts/2020/04/docker-as-a-development-environment/</link>
            <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://www.hugocurado.info/posts/2020/04/docker-as-a-development-environment/</guid>
            <description>Docker is the leading technology in microservices. As stated by Flexera&amp;rsquo;s State of the Cloud Survey, of February 27, 2019, Docker container adoption is of 57%, AWS&amp;rsquo;s EKS/ECS adoption is of 44%. Showing a real tendency by developers to move from bare metal to containers.
The article will focus on Docker essentials and answering questions like &amp;lsquo;What is Docker?&#39;, &amp;lsquo;Is it a virtualization solution?&#39;, &amp;lsquo;What are images/containers/volumes&amp;hellip;?&#39;.
Some key concepts Containers A container is a standardized unit of software that allows you to run your application independent of host conditions, making sure the application runs under the same conditions.</description>
            <content type="html"><![CDATA[<p>Docker is the leading technology in microservices. As stated by Flexera&rsquo;s State of the Cloud Survey, of February 27,
2019, Docker container adoption is of 57%, AWS&rsquo;s EKS/ECS adoption is of 44%. Showing a real tendency by developers to
move from bare metal to containers.</p>
<p>The article will focus on Docker essentials and answering questions like <em>&lsquo;What is Docker?'</em>,
<em>&lsquo;Is it a virtualization solution?'</em>, <em>&lsquo;What are images/containers/volumes&hellip;?'</em>.</p>
<h2 id="some-key-concepts">Some key concepts</h2>
<h3 id="containers">Containers</h3>
<p>A container is a standardized unit of software that allows you to run your application independent of host conditions,
making sure the application runs under the same conditions. This does not mean Docker (or any other container manager) is
a visualization solution. Contrary to a virtual machine a container shares the host OS making it lighter and potentially
faster.</p>
<h3 id="images">Images</h3>
<p>Images contain the application code as well as the necessary libraries and runtime(s) to execute the application. An image
becomes a container when it is executed. An image is built from a set of instructions defined in a Dockerfile. It is also
possible to find images in <a href="https://hub.docker.com">hub.docker.com</a>.</p>
<h3 id="volumes">Volumes</h3>
<p>A volume is a unit of storage that allows storing data from execution to execution. By default a docker container is
ephemeral. This means that once the container is stopped (terminated) all data not stored in a volume is lost.</p>
<h3 id="networks">Networks</h3>
<p>A container can be associated with one or more networks allowing it to communicate with other containers on the same network.</p>
<h2 id="dockerizing-a-rails-application-for-development">Dockerizing a Rails application for development</h2>
<p>This configuration will work for a ruby 2.5.7 based rails application and already has nodejs and yarn installed in the image.</p>
<h3 id="dockerfile">Dockerfile</h3>
<p><em>Disclaimer:</em> This Dockerfile is based on a ruby 2.5.7 for Alpine image. There is a known incompatibility with the <em>therubyracer</em>
gem which depends on libv8.</p>
<script type="application/javascript" src="https://gist.github.com/hfsvbc/b8c9834a38be40e17d204a6e1167447e.js?file=Dockerfile"></script>

<p>If you took the time to read the Dokcerfile, which I hope you did, you noticed the application code is not copied all at once.
Docker best practices encourage you to first copy application dependencies (Gemfile, Package.json, &hellip;) and install them and only
after to copy the project code. This approach allows for faster build times since the application code usually changes faster than
the application dependencies. Docker achieves faster build times by caching Image layers (an Image layer is a command execution,
ex: CMD, RUN, COPY, &hellip;), if a layer does not change from the previous build it won&rsquo;t rebuild it.</p>
<p>Looking at the Dockerfile it is possible to gather some important information about the runtime environment of the application we
are dockerizing:</p>
<ul>
<li>it uses ruby 2.5.7 compiled for the Alpine distribution (a smaller Linux distribution built to be run inside Docker)
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> ruby:2.5.7-alpine AS builder</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div></li>
<li>some arguments that will be used during build time, some of them have predefined values, and there an assignment to env vars
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">ARG</span> BUNDLE_WITHOUT<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> FREEZE_BUNDLE<span style="color:#f92672">=</span>true
<span style="color:#f92672">[</span>...<span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> BUNDLE_WITHOUT <span style="color:#e6db74">${</span>BUNDLE_WITHOUT<span style="color:#e6db74">}</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> INSTALL_PATH /app<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">[</span>...<span style="color:#f92672">]</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div></li>
<li>what system dependencies the application has
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">RUN</span> apk add --no-cache alpine-sdk postgresql-client postgresql-dev nodejs yarn <span style="color:#e6db74">${</span>EXTRA_PACKAGES<span style="color:#e6db74">}</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div></li>
<li>the gems and js packages installation</li>
<li>the copy of the application code
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">ADD</span> . .<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div></li>
<li>that the container will expose port 3000</li>
<li>and the command it will execute if a command is not specified
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;bundle&#34;</span>, <span style="color:#e6db74">&#34;exec&#34;</span>, <span style="color:#e6db74">&#34;puma&#34;</span>, <span style="color:#e6db74">&#34;-C&#34;</span>, <span style="color:#e6db74">&#34;/app/config/puma.rb&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div></li>
</ul>
<h3 id="docker-composeyml">docker-compose.yml</h3>
<script type="application/javascript" src="https://gist.github.com/hfsvbc/b8c9834a38be40e17d204a6e1167447e.js?file=docker-compose.yml"></script>

<p>Docker-compose is a docker component that allows configuring different services and how they interact with each other. Each service
is comprised of a container. In the example <code>docker-compose.yml</code> there are 4 services defined, one per application resource. The first
one describes the <code>app</code> service which is the rails application. The second one is the <code>worker</code> responsible for running sidekiq using part
of the same configuration defined by the <code>app</code> service. The other two services are the DB, a <code>PostgreSQL</code> container, and the Redis
service.</p>
<p>Taking the app service into consideration it is possible to observe some configurations:</p>
<ul>
<li><strong>image:</strong> this parameter will attribute the image name after the image build</li>
<li><strong>build:</strong> describes how the image is built
<ul>
<li><strong>context:</strong> defines where the build command will be executed, a <code>.</code> represents the current directory</li>
<li><strong>args:</strong> sets the arguments that will be passed to the image during build time (same arguments as mentioned above)</li>
</ul>
</li>
<li><strong>command:</strong> defines the command that will be run during runtime, overrides the <code>CMD</code> defined on the <code>Dockerfile</code></li>
<li><strong>stdin_open/tty:</strong> these parameters are set to allow to issue commands when attaching to a running container for debugging, it should not be used in production</li>
<li><strong>environment/env_file:</strong> sets runtime environment variables</li>
<li><strong>ports:</strong> maps host and container ports for bridged network configuration</li>
<li><strong>depends_on:</strong> defines the order by which the services are started</li>
<li><strong>volumes:</strong> maps external volumes to container paths allowing for data to be stored from one execution to the other</li>
</ul>
<h3 id="how-to-run-and-debug-the-app">How to run and debug the app?</h3>
<h4 id="running-the-app">Running the app</h4>
<p>The first step is to build all of the services described in the <code>docker-compose.yml</code> file. It will also create the default network and
any volumes you have defined.</p>
<p><em>Disclaimer:</em> this <code>docker-compose.yml</code> configuration mounts your local project folder inside the container project folder, thus removing the
necessity of building the image at any code change.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose build
</code></pre></div><p>The second step is to run the app. We have several options:</p>
<ul>
<li>Run every service in the foreground
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose up
</code></pre></div></li>
<li>Run every service in the background
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose up -d
</code></pre></div></li>
<li>Only start a specific service
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose up &lt;service, ex.: app&gt;
</code></pre></div></li>
</ul>
<h4 id="tailing-logs">Tailing logs</h4>
<p>Like the <code>up</code> command also with the <code>logs</code> command, there is the option to tail logs for every service or just one of the services</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose logs -f
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose logs -f &lt;service, ex.: app&gt;
</code></pre></div><h4 id="executing-a-command-inside-a-running-container">Executing a command inside a running container</h4>
<p>Sometimes you need to execute a command inside a running container. That&rsquo;s the purpose of the <code>exec</code> command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose exec &lt;service, ex.: app&gt; &lt;command, ex.: top&gt;
</code></pre></div><h4 id="running-a-command-inside-a-new-container">Running a command inside a new container</h4>
<p>For some tasks, it is not advised to run a command inside a running container. That&rsquo;s the purpose of the <code>run</code> command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker-compose run &lt;service, ex.: app&gt; &lt;command, ex.: docker/restore_database.sh&gt;
</code></pre></div><h4 id="debugging-a-running-application">Debugging a running application</h4>
<p>Should there be the need to debug the application with a <code>binding.pry</code> you will need to attach to the running container. By default this is not an
easy task with docker. That&rsquo;s why we introduced the <code>stdin_open/tty</code> settings in the <code>docker-compose.yml</code> file for the app service.</p>
<ol>
<li>Issue a docker ps to get the running containers</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
5b5af2b45984        pdf_service         <span style="color:#e6db74">&#34;bundle exec sidekiq&#34;</span>    <span style="color:#ae81ff">8</span> minutes ago       Up <span style="color:#ae81ff">7</span> minutes        3000/tcp                 icn-pdf-service_worker_1
8d365bf441c3        pdf_service         <span style="color:#e6db74">&#34;/entrypoint.sh&#34;</span>         <span style="color:#ae81ff">8</span> minutes ago       Up <span style="color:#ae81ff">7</span> minutes        0.0.0.0:3000-&gt;3000/tcp   icn-pdf-service_app_1
96d90169a904        redis:alpine        <span style="color:#e6db74">&#34;docker-entrypoint.s…&#34;</span>   <span style="color:#ae81ff">10</span> minutes ago      Up <span style="color:#ae81ff">7</span> minutes        6379/tcp                 icn-pdf-service_redis_1
</code></pre></div><ol start="2">
<li>Attach to the container running the app, in this case <code>8d365bf441c3</code> (or <code>8d3</code>)</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ docker attach 8d3
</code></pre></div><ol start="3">
<li>Use <code>binding.pry</code> as you normally do</li>
</ol>
<h2 id="some-usefull-links">Some usefull links</h2>
<ul>
<li><a href="https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf">Docker Cheat Sheet</a></li>
<li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Dockerfile Best Practices</a></li>
<li><a href="https://docs.docker.com/">Docker Docs</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/">Docker Compose</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Study Abroad Portugal</title>
            <link>https://www.hugocurado.info/posts/2018/01/study-abroad-portugal/</link>
            <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
            
            <guid>https://www.hugocurado.info/posts/2018/01/study-abroad-portugal/</guid>
            <description>Website developed for Study Abroad Portugal. Based on the CodeIgniter framework and a bootstrap based frontend and backend. The website is divided in two main parts: the visitors area of the website where visitors can get information about the event, news about studying abroad, an institution search engine, what institutions will be present on the next edition of the event and registration. The second half of this website is the institutions area of the website where institutions can get information about the event, metrics on past events and register for the next event.</description>
            <content type="html"><![CDATA[<p>Website developed for <a href="https://www.studyabroadportugal.pt">Study Abroad Portugal</a>.
Based on the CodeIgniter framework and a bootstrap based frontend and backend. The
website is divided in two main parts: the visitors area of the website where visitors
can get information about the event, news about studying abroad, an institution search
engine, what institutions will be present on the next edition of the event and registration.
The second half of this website is the institutions area of the website where institutions
can get information about the event, metrics on past events and register for the next event.
The next major iteration of the website will be adding AMP powered webpages to the article pages.</p>
]]></content>
        </item>
        
        <item>
            <title>Allele Validation Tool (AVT)</title>
            <link>https://www.hugocurado.info/posts/2016/06/allele-validation-tool-avt/</link>
            <pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate>
            
            <guid>https://www.hugocurado.info/posts/2016/06/allele-validation-tool-avt/</guid>
            <description>AVT or Allele Validation Tool for whole genome Multilocus Sequence Typing (wgMLST) schemas is a tool that is capable of validating novel alleles found in de novo assemblers by allele calling algorithms. The proper validation of an allele can be of extreme importance, specially in the correct detection of outbreak situations based on wgMLST.
 Poster Download Abstract Download  This project was developed by me and Margarida Cândido (1) with the help and coordination of Mickael Silva(2), João André Carriço(2) and Francisco M.</description>
            <content type="html"><![CDATA[<p>AVT or Allele Validation Tool for whole genome Multilocus Sequence Typing (wgMLST) schemas is
a tool that is capable of validating novel alleles found in de novo assemblers by allele calling
algorithms. The proper validation of an allele can be of extreme importance, specially in the
correct detection of outbreak situations based on wgMLST.</p>
<ul>
<li><a href="https://drive.google.com/file/d/0B2s_GTQ3DSBnZHdNN0R1M0s1WVk/view?usp=sharing">Poster Download</a></li>
<li><a href="https://drive.google.com/file/d/0B2s_GTQ3DSBnWDN5MlBhcFcta1U/view?usp=sharing">Abstract Download</a></li>
</ul>
<p>This project was developed by me and Margarida Cândido (1) with the help and coordination of
Mickael Silva(2), João André Carriço(2) and Francisco M. Couto(1).</p>
<ol>
<li>LaSIGE, Departamento de Informática, Faculdade de Ciências, Universidade de Lisboa, Lisboa,
Portugal</li>
<li>Instituto de Microbiologia, Instituto de Medicina Molecular, Faculdade de Medicina, Universidade
de Lisboa, Lisboa, Portugal</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
