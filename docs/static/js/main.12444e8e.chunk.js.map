{"version":3,"sources":["components/main_menu.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["MainMenu","state","isOpen","toggleCollapse","_this","setState","react_default","a","createElement","mdbreact","dark","expand","fixed","to","className","onClick","this","id","navbar","right","href","target","rel","fab","icon","Component","Header","App","BrowserRouter","main_menu_MainMenu","header_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAKMA,qNACJC,MAAQ,CACNC,QAAQ,KAGVC,eAAiB,WACfC,EAAKC,SAAS,CAAEH,QAASE,EAAKH,MAAMC,kFAIpC,OACEI,EAAAC,EAAAC,cAACC,EAAA,UAAD,CAAWC,MAAI,EAACC,OAAO,KAAKC,MAAM,OAChCN,EAAAC,EAAAC,cAACC,EAAA,eAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYI,GAAG,KAAIP,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAAlB,iBAErBR,EAAAC,EAAAC,cAACC,EAAA,iBAAD,CAAkBM,QAASC,KAAKb,iBAChCG,EAAAC,EAAAC,cAACC,EAAA,YAAD,CAAaQ,GAAG,kBAAkBf,OAAQc,KAAKf,MAAMC,OAAQgB,QAAM,GACjEZ,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcU,OAAK,GAUjBb,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACEH,EAAAC,EAAAC,cAAA,KAAGM,UAAU,oCAAoCM,KAAK,6BAA6BC,OAAO,SACvFC,IAAI,uBACLhB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASc,KAAG,EAACC,KAAK,cAGtBlB,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACEH,EAAAC,EAAAC,cAAA,KAAGM,UAAU,oCAAoCM,KAAK,sCACnDC,OAAO,SAASC,IAAI,uBACrBhB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASc,KAAG,EAACC,KAAK,eAGtBlB,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACEH,EAAAC,EAAAC,cAAA,KAAGM,UAAU,oCAAoCM,KAAK,4BAA4BC,OAAO,SACtFC,IAAI,uBACLhB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASc,KAAG,EAACC,KAAK,uBA1CXC,cCAjBC,kMAEF,OACEpB,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASK,UAAU,6DACjBR,EAAAC,EAAAC,cAACC,EAAA,aAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,OAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKM,UAAU,6DACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,qDAAd,0KARKW,cCeNE,2LAXX,OACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,eANQL,cCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12444e8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse,\n  MDBIcon } from \"mdbreact\";\nimport \"./main_menu.scss\";\n\nclass MainMenu extends Component {\n  state = {\n    isOpen: false\n  };\n\n  toggleCollapse = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  render() {\n    return (\n      <MDBNavbar dark expand=\"md\" fixed=\"top\">\n        <MDBNavbarBrand>\n          <MDBNavLink to=\"/\"><strong className=\"white-text\">Hugo Curado</strong></MDBNavLink>\n        </MDBNavbarBrand>\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n          <MDBNavbarNav right>\n            {/*<MDBNavItem active>*/}\n              {/*<MDBNavLink to=\"/\">Home</MDBNavLink>*/}\n            {/*</MDBNavItem>*/}\n            {/*<MDBNavItem>*/}\n              {/*<MDBNavLink to=\"#!\">Projects</MDBNavLink>*/}\n            {/*</MDBNavItem>*/}\n            {/*<MDBNavItem>*/}\n              {/*<MDBNavLink to=\"#!\">About Me</MDBNavLink>*/}\n            {/*</MDBNavItem>*/}\n            <MDBNavItem>\n              <a className=\"waves-effect waves-light nav-link\" href=\"https://twitter.com/hfsvbc\" target=\"_blank\"\n                 rel=\"noopener noreferrer\">\n                <MDBIcon fab icon=\"twitter\" />\n              </a>\n            </MDBNavItem>\n            <MDBNavItem>\n              <a className=\"waves-effect waves-light nav-link\" href=\"https://www.linkedin.com/in/hfsvbc/\"\n                 target=\"_blank\" rel=\"noopener noreferrer\">\n                <MDBIcon fab icon=\"linkedin\" />\n              </a>\n            </MDBNavItem>\n            <MDBNavItem>\n              <a className=\"waves-effect waves-light nav-link\" href=\"https://github.com/hfsvbc\" target=\"_blank\"\n                 rel=\"noopener noreferrer\">\n                <MDBIcon fab icon=\"github\" />\n              </a>\n            </MDBNavItem>\n          </MDBNavbarNav>\n        </MDBCollapse>\n      </MDBNavbar>\n    )\n  }\n}\n\nexport { MainMenu }","import React, { Component } from 'react';\nimport { MDBView, MDBMask, MDBContainer, MDBRow } from \"mdbreact\";\nimport \"animate.css/animate.min.css\"\nimport \"./header.scss\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <MDBView>\n        <MDBMask className=\"d-flex justify-content-center align-items-center gradient\">\n          <MDBContainer>\n            <MDBRow>\n              <div className=\"white-text text-center text-md-left col-md-8 mt-xl-7 mb-7\">\n                <h1 className=\"h1-responsive font-weight-bol animated fadeInDown\">\n                  I studied Information Technologies (IT) at Faculdade de CiÃªncias of Universidade de Lisboa. Currently a full stack web developer at Runtime Revolution.\n                </h1>\n              </div>\n            </MDBRow>\n          </MDBContainer>\n        </MDBMask>\n      </MDBView>\n    )\n  }\n}\n\nexport { Header }","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { MainMenu } from \"./components/main_menu\";\nimport { Header } from \"./components/header\";\n\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <MainMenu/>\n          <Header/>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}